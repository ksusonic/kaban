// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen -source deps.go -destination deps_mock.go -package auth
//

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	url "net/url"
	reflect "reflect"

	models "github.com/ksusonic/kanban/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockuserRepo is a mock of userRepo interface.
type MockuserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepoMockRecorder
	isgomock struct{}
}

// MockuserRepoMockRecorder is the mock recorder for MockuserRepo.
type MockuserRepoMockRecorder struct {
	mock *MockuserRepo
}

// NewMockuserRepo creates a new mock instance.
func NewMockuserRepo(ctrl *gomock.Controller) *MockuserRepo {
	mock := &MockuserRepo{ctrl: ctrl}
	mock.recorder = &MockuserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserRepo) EXPECT() *MockuserRepoMockRecorder {
	return m.recorder
}

// AddTelegramUser mocks base method.
func (m *MockuserRepo) AddTelegramUser(ctx context.Context, username string, telegramID int64, firstName string, avatarURL *string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTelegramUser", ctx, username, telegramID, firstName, avatarURL)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTelegramUser indicates an expected call of AddTelegramUser.
func (mr *MockuserRepoMockRecorder) AddTelegramUser(ctx, username, telegramID, firstName, avatarURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTelegramUser", reflect.TypeOf((*MockuserRepo)(nil).AddTelegramUser), ctx, username, telegramID, firstName, avatarURL)
}

// GetByTelegramID mocks base method.
func (m *MockuserRepo) GetByTelegramID(ctx context.Context, telegramID int64) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTelegramID", ctx, telegramID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTelegramID indicates an expected call of GetByTelegramID.
func (mr *MockuserRepoMockRecorder) GetByTelegramID(ctx, telegramID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTelegramID", reflect.TypeOf((*MockuserRepo)(nil).GetByTelegramID), ctx, telegramID)
}

// MockauthModule is a mock of authModule interface.
type MockauthModule struct {
	ctrl     *gomock.Controller
	recorder *MockauthModuleMockRecorder
	isgomock struct{}
}

// MockauthModuleMockRecorder is the mock recorder for MockauthModule.
type MockauthModuleMockRecorder struct {
	mock *MockauthModule
}

// NewMockauthModule creates a new mock instance.
func NewMockauthModule(ctrl *gomock.Controller) *MockauthModule {
	mock := &MockauthModule{ctrl: ctrl}
	mock.recorder = &MockauthModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthModule) EXPECT() *MockauthModuleMockRecorder {
	return m.recorder
}

// GenerateJWTToken mocks base method.
func (m *MockauthModule) GenerateJWTToken(userID int) (*models.JWTToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWTToken", userID)
	ret0, _ := ret[0].(*models.JWTToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWTToken indicates an expected call of GenerateJWTToken.
func (mr *MockauthModuleMockRecorder) GenerateJWTToken(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWTToken", reflect.TypeOf((*MockauthModule)(nil).GenerateJWTToken), userID)
}

// ValidateTelegramCallbackData mocks base method.
func (m *MockauthModule) ValidateTelegramCallbackData(query url.Values) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTelegramCallbackData", query)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateTelegramCallbackData indicates an expected call of ValidateTelegramCallbackData.
func (mr *MockauthModuleMockRecorder) ValidateTelegramCallbackData(query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTelegramCallbackData", reflect.TypeOf((*MockauthModule)(nil).ValidateTelegramCallbackData), query)
}
