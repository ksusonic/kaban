// Code generated by MockGen. DO NOT EDIT.
// Source: deps.go
//
// Generated by this command:
//
//	mockgen -source deps.go -destination deps_mock.go -package auth
//

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"

	models "github.com/ksusonic/kanban/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockuserRepo is a mock of userRepo interface.
type MockuserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockuserRepoMockRecorder
	isgomock struct{}
}

// MockuserRepoMockRecorder is the mock recorder for MockuserRepo.
type MockuserRepoMockRecorder struct {
	mock *MockuserRepo
}

// NewMockuserRepo creates a new mock instance.
func NewMockuserRepo(ctrl *gomock.Controller) *MockuserRepo {
	mock := &MockuserRepo{ctrl: ctrl}
	mock.recorder = &MockuserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserRepo) EXPECT() *MockuserRepoMockRecorder {
	return m.recorder
}

// AddTelegramUser mocks base method.
func (m *MockuserRepo) AddTelegramUser(ctx context.Context, username string, telegramID int64, firstName string, avatarURL *string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTelegramUser", ctx, username, telegramID, firstName, avatarURL)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTelegramUser indicates an expected call of AddTelegramUser.
func (mr *MockuserRepoMockRecorder) AddTelegramUser(ctx, username, telegramID, firstName, avatarURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTelegramUser", reflect.TypeOf((*MockuserRepo)(nil).AddTelegramUser), ctx, username, telegramID, firstName, avatarURL)
}

// GetByID mocks base method.
func (m *MockuserRepo) GetByID(ctx context.Context, id int) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockuserRepoMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockuserRepo)(nil).GetByID), ctx, id)
}

// GetByTelegramID mocks base method.
func (m *MockuserRepo) GetByTelegramID(ctx context.Context, telegramID int64) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTelegramID", ctx, telegramID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTelegramID indicates an expected call of GetByTelegramID.
func (mr *MockuserRepoMockRecorder) GetByTelegramID(ctx, telegramID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTelegramID", reflect.TypeOf((*MockuserRepo)(nil).GetByTelegramID), ctx, telegramID)
}

// GetUserIDByTelegramID mocks base method.
func (m *MockuserRepo) GetUserIDByTelegramID(ctx context.Context, telegramID int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByTelegramID", ctx, telegramID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByTelegramID indicates an expected call of GetUserIDByTelegramID.
func (mr *MockuserRepoMockRecorder) GetUserIDByTelegramID(ctx, telegramID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByTelegramID", reflect.TypeOf((*MockuserRepo)(nil).GetUserIDByTelegramID), ctx, telegramID)
}
